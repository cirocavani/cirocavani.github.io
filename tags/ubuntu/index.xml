<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ubuntu on Ciro Cavani</title>
    <link>http://cirocavani.github.io/tags/ubuntu/</link>
    <description>Recent content in Ubuntu on Ciro Cavani</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 08 Sep 2016 22:06:49 -0300</lastBuildDate>
    <atom:link href="http://cirocavani.github.io/tags/ubuntu/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Compilação do TensorFlow 0.10 para Linux (com GPU)</title>
      <link>http://cirocavani.github.io/post/compilacao-do-tensorflow-0.10-para-linux-com-gpu/</link>
      <pubDate>Thu, 08 Sep 2016 22:06:49 -0300</pubDate>
      
      <guid>http://cirocavani.github.io/post/compilacao-do-tensorflow-0.10-para-linux-com-gpu/</guid>
      <description>

&lt;p&gt;Esse tutorial é sobre a construção do pacote do TensorFlow 0.10 para Linux com suporte a GPU. Para esse procedimento é usado o Docker com uma imagem do Ubuntu 16.04, GCC 5.4, Python 2.7, Cuda 8.0 (RC) e cuDNN 5.1. A motivação desse trabalho é usar o TensorFlow com as novas gerações de GPUs da Nvidia (&lt;a href=&#34;https://developer.nvidia.com/pascal&#34;&gt;Pascal&lt;/a&gt;). Um segundo objetivo é a criação de um pacote do TensorFlow com capacidades específicas (por exemplo, um &amp;ldquo;Compute Capability&amp;rdquo; específico).&lt;/p&gt;

&lt;p&gt;O procedimento também está disponível como um script para Docker (ainda é necessário fazer o download do Cuda manualmente).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cirocavani/tensorflow-build&#34;&gt;https://github.com/cirocavani/tensorflow-build&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;compilação&#34;&gt;Compilação&lt;/h2&gt;

&lt;p&gt;O procedimento consiste em:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Instalar o Cuda 8.0rc com o patch para GCC 5.4&lt;/li&gt;
&lt;li&gt;Instalar o cuDNN 5.1 para Cuda 8.0&lt;/li&gt;
&lt;li&gt;Instalar o Java 8&lt;/li&gt;
&lt;li&gt;Instalar o Bazel 0.3&lt;/li&gt;
&lt;li&gt;Construir TensorFlow 0.10&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;O resultado é o pacote do TensorFlow para Python 2 e Linux (com GPU):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tensorflow-0.10.0-py2-none-linux_x86_64.whl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Baseado na documentação:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.tensorflow.org/versions/r0.10/get_started/os_setup.html#installing-from-sources&#34;&gt;https://www.tensorflow.org/versions/r0.10/get_started/os_setup.html#installing-from-sources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Um procedimento alternativo:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tensorflow/tensorflow/blob/r0.10/tensorflow/tools/docker/Dockerfile.devel-gpu&#34;&gt;https://github.com/tensorflow/tensorflow/blob/r0.10/tensorflow/tools/docker/Dockerfile.devel-gpu&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;download-do-cuda-8-0rc-cudnn-5-1&#34;&gt;Download do Cuda 8.0rc, cuDNN 5.1&lt;/h3&gt;

&lt;p&gt;É necessário o download dos pacotes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cuda_8.0.27_linux.run
cuda_8.0.27.1_linux.run
cudnn-8.0-linux-x64-v5.1.tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esses pacotes devem ser colocados na pasta &lt;code&gt;build_deps/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;No momento, a versão mais recente do Cuda é a 8.0 RC e só está disponível para download para membros do &lt;a href=&#34;https://developer.nvidia.com/accelerated-computing-developer&#34;&gt;Accelerated Computing Developer Program&lt;/a&gt; no site da Nvidia (o cadastro é gratuito).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.nvidia.com/cuda-release-candidate-download&#34;&gt;https://developer.nvidia.com/cuda-release-candidate-download&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Select Target Platform:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Operating System = Linux
Architecture = x86_64
Distribution = Ubuntu
Version = 16.04
Installer Type = runfile (local)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Base Installer&lt;/strong&gt; - &lt;code&gt;cuda_8.0.27_linux.run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Patch 1&lt;/strong&gt; - &lt;code&gt;cuda_8.0.27.1_linux.run&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.nvidia.com/rdp/cudnn-download&#34;&gt;https://developer.nvidia.com/rdp/cudnn-download&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Selecione:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. I Agree To the Terms of the cuDNN Software License Agreement
2. Download cuDNN v5.1 (August 10, 2016), for CUDA 8.0 RC
3. cuDNN v5.1 Library for Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cudnn-8.0-linux-x64-v5.1.tgz&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;setup-inicial-no-docker-para-ubuntu-16-04&#34;&gt;Setup inicial no Docker para Ubuntu 16.04&lt;/h3&gt;

&lt;p&gt;Download dos demais pacotes necessários para o build:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd build_deps

curl -k -L \
  -H &amp;quot;Cookie: oraclelicense=accept-securebackup-cookie&amp;quot; \
  -O http://download.oracle.com/otn-pub/java/jdk/8u102-b14/jdk-8u102-linux-x64.tar.gz

curl -k -L \
  -O https://github.com/bazelbuild/bazel/releases/download/0.3.1/bazel-0.3.1-installer-linux-x86_64.sh

chmod +x cuda_8.0.27_linux.run
chmod +x cuda_8.0.27.1_linux.run
chmod +x bazel-0.3.1-installer-linux-x86_64.sh

cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Criação do Container com as dependências:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker create -t --name=tensorflow_build ubuntu:16.04
docker cp build_deps tensorflow_build:/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execução do Shell no Container:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker start tensorflow_build
docker exec -i -t tensorflow_build /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setup do Container:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#39;debconf debconf/frontend select Noninteractive&#39; | debconf-set-selections
echo &#39;APT::Install-Recommends &amp;quot;0&amp;quot;;&#39; &amp;gt; 01norecommend
mv 01norecommend /etc/apt/apt.conf.d

apt-get update
apt-get upgrade -y

apt-get install -y \
    build-essential \
    python-dev \
    python-wheel \
    python-setuptools \
    python-numpy \
    swig \
    zlib1g-dev \
    unzip \
    file \
    git \
    ca-certificates \
    rsync
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;instalação-do-cuda-8-0rc-e-cudnn-5-1&#34;&gt;Instalação do Cuda 8.0rc e cuDNN 5.1&lt;/h3&gt;

&lt;p&gt;(comandos a serem executados dentro do container)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/build_deps/cuda_8.0.27_linux.run --silent --toolkit --override

/build_deps/cuda_8.0.27.1_linux.run --silent --accept-eula

tar zxf /build_deps/cudnn-8.0-linux-x64-v5.1.tgz \
    -C /usr/local/cuda-8.0 --strip-components=1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;instalação-do-java-8&#34;&gt;Instalação do Java 8&lt;/h3&gt;

&lt;p&gt;(comandos a serem executados dentro do container)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tar zxf /build_deps/jdk-8u102-linux-x64.tar.gz -C /opt --no-same-owner

echo &#39;export JAVA_HOME=/opt/jdk1.8.0_102&#39; &amp;gt; /etc/profile.d/java.sh
echo &#39;export PATH=$PATH:$JAVA_HOME/bin&#39; &amp;gt;&amp;gt; /etc/profile.d/java.sh
chmod a+x /etc/profile.d/java.sh

source /etc/profile.d/java.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;instalação-do-bazel-0-3&#34;&gt;Instalação do Bazel 0.3&lt;/h3&gt;

&lt;p&gt;(comandos a serem executados dentro do container)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/build_deps/bazel-0.3.1-installer-linux-x86_64.sh --prefix=/opt/bazel-0.3.1

echo &#39;export PATH=$PATH:/opt/bazel-0.3.1/bin&#39; &amp;gt; /etc/profile.d/bazel.sh
chmod a+x /etc/profile.d/bazel.sh

source /etc/profile.d/bazel.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;construção-do-tensorflow-0-10&#34;&gt;Construção do TensorFlow 0.10&lt;/h3&gt;

&lt;p&gt;Considerações:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Configuração da GPU&lt;/p&gt;

&lt;p&gt;É necessário definir qual &amp;ldquo;Compute Capability&amp;rdquo; o binário do TensorFlow vai suportar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.nvidia.com/cuda-gpus&#34;&gt;https://developer.nvidia.com/cuda-gpus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;p&gt;A GeForce GT 740M tem Compute Capability 3.0&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export TF_CUDA_COMPUTE_CAPABILITIES=3.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Uso de Memória&lt;/p&gt;

&lt;p&gt;O build executa várias tarefas em paralelo e o consumo de memória pode aumentar rapidamente.&lt;/p&gt;

&lt;p&gt;Para limitar o número de execuções paralelas é usada a opção &lt;code&gt;-j 4&lt;/code&gt; no build.&lt;/p&gt;

&lt;p&gt;Em um notebook com 8 cores (HT), 8G de memória é insuficiente.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(comandos a serem executados dentro do container)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;useradd -m tensorflow
passwd -d tensorflow

su - tensorflow

git clone https://github.com/tensorflow/tensorflow.git -b r0.10 ~/tensorflow-0.10

cd ~/tensorflow-0.10

export PYTHON_BIN_PATH=/usr/bin/python
export TF_NEED_GCP=0
export TF_NEED_CUDA=1
export GCC_HOST_COMPILER_PATH=/usr/bin/gcc
export TF_CUDA_VERSION=8.0
export CUDA_TOOLKIT_PATH=/usr/local/cuda-8.0
export TF_CUDNN_VERSION=5
export CUDNN_INSTALL_PATH=/usr/local/cuda-8.0
export TF_CUDA_COMPUTE_CAPABILITIES=3.0
./configure

bazel build -j 4 -c opt --config=cuda \
    //tensorflow/tools/pip_package:build_pip_package

bazel-bin/tensorflow/tools/pip_package/build_pip_package $HOME

mv ~/tensorflow-0.10.0-py2-none-{any,linux_x86_64}.whl

# saindo su
exit

# saindo do container
exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;Para baixar o pacote (fora do container):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker cp \
    tensorflow_build:/home/tensorflow/tensorflow-0.10.0-py2-none-linux_x86_64.whl \
    .
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusão&#34;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;O procedimento de build do TensorFlow não é complicado, mas pequenas variações podem atingir alguns bugs do build (&lt;a href=&#34;https://github.com/tensorflow/tensorflow/issues/3985&#34;&gt;exemplo&lt;/a&gt;). Com um script bem definido, fica fácil criar o pacote do TensorFlow.&lt;/p&gt;

&lt;p&gt;Com esse pacote, é possível usar o TensorFlow nas GPUs mais recentes da Nvidia.&lt;/p&gt;

&lt;p&gt;No próximo artigo será um tutorial de como configurar um ambiente de desenvolvimento com Jupyter.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>