<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algoritmos on Ciro Cavani</title>
    <link>http://cirocavani.github.io/tags/algoritmos/</link>
    <description>Recent content in Algoritmos on Ciro Cavani</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 24 Sep 2015 19:44:08 -0300</lastBuildDate>
    <atom:link href="http://cirocavani.github.io/tags/algoritmos/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Otimização dos parâmetros do Spark ALS (Collaborative Filtering) usando MOE</title>
      <link>http://cirocavani.github.io/post/otimizacao-dos-parametros-do-spark-als-collaborative-filtering-usando-moe/</link>
      <pubDate>Thu, 24 Sep 2015 19:44:08 -0300</pubDate>
      
      <guid>http://cirocavani.github.io/post/otimizacao-dos-parametros-do-spark-als-collaborative-filtering-usando-moe/</guid>
      <description>&lt;p&gt;Esse tutorial é sobre otimização de parâmetros em modelos de machine learning. Para esse tutorial, a ferramenta utilizada é o MOE, Metric Optimization Engine, desenvolvido pelo Yelp que implementa o algoritmo de busca usando Gaussian Process. O algoritmo escolhido para ter os parâmetros otimizados é o Collaborative Filtering baseado na fatoração da matriz de preferências. De forma genérica, esse é um processo que pode ser facilmente adaptado para outros algoritmos e permite sistematizar a árdua tarefa de escolher os melhores parâmetros para um modelo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yelp.github.io/MOE/&#34;&gt;http://yelp.github.io/MOE/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;MOE (Metric Optimization Engine) is an efficient way to optimize a system’s parameters, when evaluating parameters is time-consuming or expensive.&lt;/p&gt;

&lt;p&gt;How does MOE work?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build a Gaussian Process (GP) with the historical data&lt;/li&gt;
&lt;li&gt;Optimize the hyperparameters of the Gaussian Process&lt;/li&gt;
&lt;li&gt;Find the point(s) of highest Expected Improvement (EI)&lt;/li&gt;
&lt;li&gt;Return the point(s) to sample, then repeat&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Primeiramente, é feita a instalação do MOE. Nesse processo, é necessário configurar o ambiente para compilar as dependências do projeto e o código que é composto por Python e C++. No final desse procedimento, o serviço do MOE estará disponível como um servidor REST e a API Python que pode ser usada para definir o procedimento de otimização.&lt;/p&gt;

&lt;p&gt;O procedimento de instalação em detalhes é descrito aqui:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yelp.github.io/MOE/install.html#install-from-source&#34;&gt;http://yelp.github.io/MOE/install.html#install-from-source&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;
mkdir grandesdados-opt
cd grandesdados-opt

virtualenv --no-site-packages --python=python2.7 moe-env

&amp;gt; Running virtualenv with interpreter /usr/bin/python2.7
&amp;gt; New python executable in moe-env/bin/python2.7
&amp;gt; Also creating executable in moe-env/bin/python
&amp;gt; Installing setuptools, pip, wheel...done.

source moe-env/bin/activate

git clone https://github.com/Yelp/MOE.git
cd MOE

pip install -r requirements.txt

&amp;gt; (...)
&amp;gt; Successfully installed (...)

python setup.py install

&amp;gt; (...)

pserve --reload development.ini

&amp;gt; (...)
&amp;gt; Starting server in PID 23232.
&amp;gt; serving on 0.0.0.0:6543 view at http://127.0.0.1:6543

# (nesse momento, esse terminal fica &#39;preso&#39; mostrando o log do servidor do MOE)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O próximo passo é instalar o algoritmo que tem parâmetros que precisam ser otimizados.&lt;/p&gt;

&lt;p&gt;Nesse tutorial, será usado o algoritmo de Collaborative Filtering baseado na fatoração da matriz de preferências que gera um vetor para cada usuário e item da matriz original. Nesse algoritmo, os parâmetros são a dimensão do vetor a ser gerado (fatores latentes), o número de iterações para fatoração da matriz e o parâmetro de regularização usado na fatoração.&lt;/p&gt;

&lt;p&gt;O DataSet usado é um sample MovieLens que já vem na distribuição do Spark. São 1501 ratings, 30 usuários e 100 filmes.&lt;/p&gt;

&lt;p&gt;O código pode ser análisado aqui:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apache/spark/blob/v1.5.0/examples/src/main/scala/org/apache/spark/examples/ml/MovieLensALS.scala&#34;&gt;https://github.com/apache/spark/blob/v1.5.0/examples/src/main/scala/org/apache/spark/examples/ml/MovieLensALS.scala&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(procedimento na mesma pasta anterior &lt;code&gt;grandesdados-opt&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L -O http://ftp.unicamp.br/pub/apache/spark/spark-1.5.0/spark-1.5.0-bin-hadoop2.6.tgz
tar zxf spark-1.5.0-bin-hadoop2.6.tgz
cd spark-1.5.0-bin-hadoop2.6/

cp conf/log4j.properties{.template,}
sed -i s/log4j\.rootCategory\=INFO/log4j\.rootCategory\=ERROR/1 conf/log4j.properties

echo &amp;quot;spark.ui.showConsoleProgress=false&amp;quot; &amp;gt; conf/spark-defaults.conf

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Executando o exemplo do MovieLens (a saída são os parâmetros):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;
./bin/run-example ml.MovieLensALS

&amp;gt; Error: Missing option --ratings
&amp;gt; Error: Missing option --movies
&amp;gt; MovieLensALS: an example app for ALS on MovieLens data.
&amp;gt; Usage: MovieLensALS [options]
&amp;gt;
&amp;gt;   --ratings &amp;lt;value&amp;gt;
&amp;gt;         path to a MovieLens dataset of ratings
&amp;gt;   --movies &amp;lt;value&amp;gt;
&amp;gt;         path to a MovieLens dataset of movies
&amp;gt;   --rank &amp;lt;value&amp;gt;
&amp;gt;         rank, default: 10
&amp;gt;   --maxIter &amp;lt;value&amp;gt;
&amp;gt;         max number of iterations, default: 10
&amp;gt;   --regParam &amp;lt;value&amp;gt;
&amp;gt;         regularization parameter, default: 0.1
&amp;gt;   --numBlocks &amp;lt;value&amp;gt;
&amp;gt;         number of blocks, default: 10
&amp;gt;
&amp;gt; Example command line to run this app:
&amp;gt;
&amp;gt;  bin/spark-submit --class org.apache.spark.examples.ml.MovieLensALS \
&amp;gt;   examples/target/scala-*/spark-examples-*.jar \
&amp;gt;   --rank 10 --maxIter 15 --regParam 0.1 \
&amp;gt;   --movies data/mllib/als/sample_movielens_movies.txt \
&amp;gt;   --ratings data/mllib/als/sample_movielens_ratings.txt

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fazendo uma execução:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;
time ./bin/run-example ml.MovieLensALS \
--rank 10 --maxIter 15 --regParam 0.1 \
--movies data/mllib/als/sample_movielens_movies.txt \
--ratings data/mllib/als/sample_movielens_ratings.txt

&amp;gt; Got 1501 ratings from 30 users on 100 movies.                                   
&amp;gt; Training: 1169, test: 332.
&amp;gt; Test RMSE = 0.9815785141168548.                                                 
&amp;gt; Found 0 false positives                                                         
&amp;gt;
&amp;gt; real	0m22.441s
&amp;gt; user	0m56.320s
&amp;gt; sys	0m1.847s

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para fazer a otimização, o MOE requer que o problema seja modelado como uma função do vetor de parâmetros para um valor escalar. O objetivo da ferramenta é minimizar essa função.&lt;/p&gt;

&lt;p&gt;Para o problema do ALS, por simplicidade, vamos aproveitar que o exemplo já calcula o RMSE e usar a função que mapeia o vetor do Número de Fatores Latentes, Número de Iterações e Regularização para o RMSE. Faz sentido o objetivo ser minimizar o RMSE.&lt;/p&gt;

&lt;p&gt;Na pasta &lt;code&gt;grandesdados-opt&lt;/code&gt;, crie o arquivo &lt;code&gt;func.sh&lt;/code&gt; que mapeia a função desejada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash

cd spark-1.5.0-bin-hadoop2.6/

./bin/run-example ml.MovieLensALS \
--rank $1 --maxIter $2 --regParam $3 \
--movies data/mllib/als/sample_movielens_movies.txt \
--ratings data/mllib/als/sample_movielens_ratings.txt 2&amp;gt;&amp;amp;1 \
| sed -n &#39;s/\(Test RMSE =\) \([0-9]*\.[0-9]*\)\./\2/p&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dessa forma, teremos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;chmod +x func.sh

./func.sh 10 15 0.1

&amp;gt; 0.9815785141168546
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agora podemos definir o procedimento de otimização como um experimento do MOE.&lt;/p&gt;

&lt;p&gt;O experimento é criado com o domínio dos parâmetros que estamos querendo otimizar. Dado que estamos trabalhando com um DataSet limitado, podemos restringir os valores.&lt;/p&gt;

&lt;p&gt;Nesse exemplo, estamos usando:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Número de Fatores Latentes: entre 5 e 50&lt;/li&gt;
&lt;li&gt;Número de Iterações da Fatoração: entre 5 e 20&lt;/li&gt;
&lt;li&gt;Regularização da Fatoração: entre 0.001 e 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vamos assumir como primeiro ponto &amp;lsquo;ótimo&amp;rsquo; o que vem documentado no exemplo, ou seja, 10, 15 e 0,1.&lt;/p&gt;

&lt;p&gt;A busca por uma solução muito boa pode envolver muitas iterações do processo de otimização, nesse exemplo vamos usar 20, mas poderia ser 100 ou 400 para uma busca mais completa.&lt;/p&gt;

&lt;p&gt;Na pasta &lt;code&gt;grandesdados-opt&lt;/code&gt;, crie o arquivo &lt;code&gt;opt.py&lt;/code&gt; que define o procedimento de otimização:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import subprocess

from moe.easy_interface.experiment import Experiment
from moe.easy_interface.simple_endpoint import gp_next_points
from moe.optimal_learning.python.data_containers import SamplePoint

def function_to_minimize(x):
    f = &amp;quot;./func.sh {0:} {1:} {2:}&amp;quot;.format(int(x[0]), int(x[1]), x[2])
    print f
    y = subprocess.Popen(f, shell=True, stdout=subprocess.PIPE).stdout.read().strip()
    if y: print y
    return float(y)

if __name__ == &#39;__main__&#39;:
    exp = Experiment([[5, 50], [5, 20], [0.001, 1]])

    xmin = []
    ymin = 0.0

    for i in range(20):
        print &amp;quot;Sample {0:}&amp;quot;.format(i)
        try:
            x = [10.0, 15.0, 0.1] if i == 0 else gp_next_points(exp)[0]
            y = function_to_minimize(x)
            exp.historical_data.append_sample_points([
                SamplePoint(x, y, 0.05),
            ])
            if not xmin or y &amp;lt; ymin:
                xmin, ymin = x, y
        except ValueError:
            print &amp;quot;error&amp;quot;
        print

    print str(xmin)
    print str(ymin)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por fim, o resultado:
&lt;br/&gt;(necessário estar dentro do virtualenv onde o MOE foi instalado)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python2 opt.py

&amp;gt; Sample 0
&amp;gt; ./func.sh 10 15 0.1
&amp;gt; 0.9815785141168545
&amp;gt; (...)
&amp;gt; Sample 19
&amp;gt; ./func.sh 16 19 0.41989952735
&amp;gt; error
&amp;gt;
&amp;gt; [46.6604641336, 19.9410400182, 0.0409527639665]
&amp;gt; 0.977384860516

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como podemos ver, os parâmetros 46 para Número de Fatores Latentes, 19 para Iterações da Fatoração e 0,041 para Regularização resultaram em um erro menor nesse dataset de exemplo.&lt;/p&gt;

&lt;p&gt;Para mais informações sobre otimização usando o MOE, consulte a documentação.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>